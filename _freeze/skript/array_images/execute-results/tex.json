{
  "hash": "0f80659b15149fe4ddcb81d3c42fc71c",
  "result": {
    "engine": "jupyter",
    "markdown": "## Arbeiten mit Bildern\n\n\n\nBilder werden digital als Matrizen gespeichert. Dabei werden pro Pixel drei \nFarbwerte (rot, grün, blau) gespeichert. Aus diesen drei Farbwerten (Wert 0-255) \nwerden dann alle gewünschten Farben zusammengestellt. \n\n![Ein hochaufgelöstes Bild besteht aus sehr vielen Pixeln. Jedes Pixel enthät 3 Farbwerte, einen für die Fabre Grün, einen für Blau und einen für Rot.](../skript/00-bilder/pixel_mona_lisa_split.svg){#fig-pixel_colors fig-alt=\"Schaubild, was zeigt, dass ein hochaufgelöstes Bild der Mona Lisa aus einzelnen Pixeln besteht, welche wiederum aus den drei Farben blau, rot und grün zusammengesetzt sind\"}\n\nAufgrund der digitalen Darstellung von Bildern lassen sich diese mit den \nWerkzeugen von NumPy leicht bearbeiten. \nWir verwenden für folgendes Beispiel als Bild die Monas Lisa. Das Bild ist unter folgendem [Link](https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Mona_Lisa.jpg/677px-Mona_Lisa.jpg) zu finden.\n\nImportieren wir dieses Bild nun mit der Funktion `imread()`aus dem \nmatplotlib-package, sehen wir das es um ein dreidimensionales numpy Array \nhandelt. \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\ndata = plt.imread(\"00-bilder/mona_lisa.jpg\")\nprint(\"Form:\", data.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nForm: (1024, 677, 3)\n```\n:::\n:::\n\n\nSchauen wir uns einmal mit der `print()`-Funktion einen Ausschnitt dieser Daten an.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[[ 68  62  38]\n  [ 88  82  56]\n  [ 92  87  55]\n  ...\n  [ 54  97  44]\n  [ 68 110  60]\n  [ 69 111  63]]\n\n [[ 65  59  33]\n  [ 68  63  34]\n  [ 83  78  46]\n  ...\n  [ 66 103  51]\n  [ 66 103  52]\n  [ 66 102  56]]\n\n [[ 97  90  62]\n  [ 87  80  51]\n  [ 78  72  38]\n  ...\n  [ 79 106  53]\n  [ 62  89  38]\n  [ 62  88  41]]\n\n ...\n\n [[ 25  14  18]\n  [ 21  10  14]\n  [ 20   9  13]\n  ...\n  [ 11   5   9]\n  [ 11   5   9]\n  [ 10   4   8]]\n\n [[ 23  12  16]\n  [ 23  12  16]\n  [ 21  10  14]\n  ...\n  [ 11   5   9]\n  [ 11   5   9]\n  [ 10   4   8]]\n\n [[ 22  11  15]\n  [ 26  15  19]\n  [ 24  13  17]\n  ...\n  [ 11   5   9]\n  [ 10   4   8]\n  [  9   3   7]]]\n```\n:::\n:::\n\n\nMit der Funktion `plt.imshow` kann das Bild in Echtfarben dargestellt werden. \nDies funktioniert, da die Funktion die einzelnen Ebenen, hier der letzte Index, \ndes Datensatzes als Farbinformationen (rot, grün, blau) interpretiert. Wäre \nnoch eine vierte Ebene dabei, würde sie als individueller Transparenzwert \nverwendet worden.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nplt.imshow(data)\n```\n\n::: {.cell-output .cell-output-display}\n![](array_images_files/figure-pdf/cell-5-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nNatürlich können auch die einzelnen Farbebenen individuell betrachtet werden. \nDazu wird der letzte Index festgehalten. Hier betrachten wir nur den reten Anteil\ndes Bildes. Stellen wir ein einfaches Array dar, werden die Daten in schwarz-weiß\nausgegeben. Mit Hilfe der Option `cmap='Reds'` können wir die Farbskala anpassen.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Als Farbskale wird die Rotskala \n# verwendet 'Reds'\nplt.imshow( data[:,:,0], cmap='Reds' )\nplt.colorbar()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](array_images_files/figure-pdf/cell-6-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nDa die Bilddaten als Arrays gespeichert sind, sind viele der möglichen Optionen, \nz.B. zur Teilauswahl oder Operationen, verfügbar. Das untere Beispiel zeigt \neinen Ausschnitt im Rotkanal des Bildes.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nbereich = np.array(data[450:500, 550:600,0], dtype=float)\nplt.imshow( bereich, cmap=\"Greys\" )\nplt.colorbar()\n```\n\n::: {.cell-output .cell-output-display}\n![](array_images_files/figure-pdf/cell-7-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nBetrachten wir nun eine komplexere Operation an Bilddaten, den \n[Laplace-Operator](https://de.wikipedia.org/wiki/Laplace-Operator). Er kann \ngenutzt werden um Ränder von Objekten zu identifizieren. Dazu wird für jeden \nBildpunkt $B_{i,j}$ – außer an den Rändern – folgender Wert $\\phi_{i, j}$ \nberechnet:\n\n$$ \\phi_{i, j} = \\left|B_{i-1, j} + B_{i, j-1} - 4\\cdot B_{i, j} + B_{i+1, j} + B_{i, j+1}\\right| $$\n\nFolgende Funktion implementiert diese Operation. Darüber hinaus werden alle Werte \nvon $\\phi$ unterhalb eines Schwellwerts auf Null und oberhalb auf 255 gesetzt.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndef img_lap(data, schwellwert=25):\n    \n    # Erstellung einer Kopie der Daten, nun jedoch als\n    # Array mit Gleitkommazahlen\n    bereich = np.array(data, dtype=float)\n    \n    # Aufteilung der obigen Gleichung in zwei Teile\n    lapx = bereich[2:, :] - 2*bereich[1:-1, :] + bereich[:-2, :]\n    lapy = bereich[:, 2:] - 2*bereich[:, 1:-1] + bereich[:, :-2]\n    \n    # Zusammenführung der Teile und Bildung des Betrags\n    lap = np.abs(lapx[:,1:-1] + lapy[1:-1, :])\n    \n    # Schwellwertanalyse\n    lap[lap > schwellwert] = 255\n    lap[lap < schwellwert] = 0\n    \n    return lap\n```\n:::\n\n\nBetrachten wir ein Bild vom Haspel Campus in Wuppertal ein: \n[Bild](https://firedynamics.github.io/LectureComputerScience/_downloads/592f1fc843fc7c01bdcad17bf85ec15c/campus_haspel.jpeg).\nDie Anwendung des Laplace-Operators auf den oberen Bildausschnitt ergibt folgende \nAusgabe: \n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndata = plt.imread('01-daten/campus_haspel.jpeg')\nbereich = np.array(data[1320:1620, 400:700, 1], dtype=float)\n\nlap = img_lap(bereich)\n\nplt.figure(figsize=(9, 3))\n\nax = plt.subplot(1, 3, 1)\nax.imshow(data, cmap=\"Greys_r\")\n\nax = plt.subplot(1, 3, 2)\nax.imshow(bereich, cmap=\"Greys_r\");\n\nax = plt.subplot(1, 3, 3)\nax.imshow(lap, cmap=\"Greys\");\n```\n\n::: {.cell-output .cell-output-display}\n![](array_images_files/figure-pdf/cell-9-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nWir können damit ganz klar die Formen des Fensters erkennen.\n\nWollen wir zum Beispiel eine Farbkomponente bearbeiten und dann das Bild wieder \nzusammensetzen, benötigen wir die Funktion `np.dstack((rot, grün, blau)).astype('uint8')`, \nwobei `rot`, `grün`und `blau` die jeweiligen 2D-Arrays sind. Versuchen wir nun \ndie grüne Farbe aus dem Baum links zu entfernen. \n\nWichtig ist, dass die Daten nach dem Zusammensetzen im Format `uint8` vorliegen, deswegen die Methode `.astype('uint8')`.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndata = plt.imread('01-daten/campus_haspel.jpeg')\n\n# Speichern der einzelnen Farben in Arrays\nrot = np.array(data[:, :, 0], dtype=float)\ngruen = np.array(data[:, :, 1], dtype=float)\nblau = np.array(data[:, :, 2], dtype=float)\n\n# Setzen wir den Bereich des linken Baumes im Array auf 0\ngruen_neu = gruen.copy()\ngruen_neu[800:2000, 700:1700] = 0\n\nzusammengesetzt = np.dstack((rot, gruen_neu, blau)).astype('uint8')\n\nplt.figure(figsize=(8, 5))\n\nax = plt.subplot(1, 2, 1)\nax.imshow(data, cmap=\"Greys_r\")\n\nax = plt.subplot(1, 2, 2)\nax.imshow(zusammengesetzt)\n```\n\n::: {.cell-output .cell-output-display}\n![](array_images_files/figure-pdf/cell-10-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n## Zwischenübung: Bilder bearbeiten\n\nLesen Sie folgendes Bild vom Haspel Campus in Wuppertal ein: \n[Bild](https://firedynamics.github.io/LectureComputerScience/_downloads/592f1fc843fc7c01bdcad17bf85ec15c/campus_haspel.jpeg)\n\nExtrahieren Sie den blauen Anteil und lassen Sie sich die Zeile in der Mitte des \nBildes ausgeben, so wie einen beliebigen Bildauschnitt.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = plt.imread('01-daten/campus_haspel.jpeg')\n\nform =  data.shape\nprint( \"Form:\", data.shape )\n\nblau =  data[:,:,2]\nplt.imshow(blau, cmap='Blues')\n\nzeile =  data[int(form[0]/2),:,2]\nprint(zeile)\n\nausschnitt =  data[10:50,10:50,:]\nplt.imshow(ausschnitt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nForm: (3024, 4032, 3)\n[221 220 220 ...  28  28  28]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](array_images_files/figure-pdf/cell-11-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n:::\n\n",
    "supporting": [
      "array_images_files/figure-pdf"
    ],
    "filters": []
  }
}
{
  "hash": "6ba3c7a4dd58cc33068eaeee109e53a0",
  "result": {
    "engine": "jupyter",
    "markdown": "# Lesen und Schreiben von Dateien\n\n\n\nDas Modul numpy stellt Funktionen zum Lesen und Schreiben von strukturierten \nTextdateien bereit.\n\n## Lesen von Dateien\n\nZum Lesen von strukturierten Textdateien, z.B. im CSV-Format (comma separated \nvalues), kann die `np.loadtxt()`-Funktion verwendet werden. Diese bekommt als \nArgumente den einzulesenden Dateinamen und weitere Optionen zur Definition der \nStruktur der Daten. Der Rückgabewert ist ein (mehrdimensionales) Array.\n\nIm folgenden Beispiel wird die Datei [TC01.csv](https://firedynamics.github.io/LectureComputerScience/_downloads/0d1a3bfbc82fa134e08585d6151e9f46/TC01.csv) eingelesen und deren Inhalt \ngraphisch dargestellt. Die erste Zeile der Datei wird dabei ignoriert, da sie \nals Kommentar – eingeleitet durch das #-Zeichen – interpretiert wird.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndateiname = '01-daten/TC01.csv'\ndaten = np.loadtxt(dateiname)\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint(\"Daten:\", daten)\nprint(\"Form:\", daten.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDaten: [20.1 20.1 20.1 ... 24.3 24.2 24.2]\nForm: (1513,)\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nplt.plot(daten)\nplt.xlabel('Datenindex')\nplt.ylabel('Temperatur in °C');\n```\n\n::: {.cell-output .cell-output-display}\n![](array_read_n_write_files/figure-pdf/cell-5-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nStandardmäßig erwartet die `np.loadtxt()`-Funktion Komma separierte Werte. \nWerden die Daten durch ein anderes Trennzeichen getrennt, kann mit der Option \n`delimiter = \"\"` ein anderes Trenzeichen ausgewählt werden. Beispielsweise würde \nder Funktionsaufruf bei einem Semikolon folgendermaßen aussehen:\n`np.loadtxt(data.txt, delimiter = \";\")`\n\nBeginnt die Datei mit den Daten mit Zeilen bezüglich zusätzlichen Informationen \nwie Einheiten oder Experimentdaten, können diese mit der Option\n`skiprows= #Reihen`übersprungen werden.\n\n## Schreiben von Dateien\n\nZum Schreiben von Arrays in Dateien, kann die in numpy verfügbare Funktion \n`np.savetxt()` verwendet werden. Dieser müssen mindestens die zu schreibenden \nArrays als auch ein Dateiname übergeben werden. Darüber hinaus sind zahlreiche \nFormatierungs- bzw. Strukturierungsoptionen möglich.\n\nFolgendes Beispiel skaliert die oben eingelesenen Daten und schreib jeden \nzehnten Wert in eine Datei. Dabei wird auch ein Kommentar (`header`-Argument) \nam Anfang der Datei erzeugt. Das Ausgabeformat der Zahlen kann mit dem \n`fmt`-Argument angegeben werden. Das Format ähnelt der Darstellungsweise, \nwelche bei den formatierten Zeichenketten vorgestellt wurde.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nwertebereich = np.max(daten) - np.min(daten)\ndaten_skaliert = ( daten - np.min(daten) ) / wertebereich\ndaten_skaliert = daten_skaliert[::10]\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nplt.plot(daten_skaliert)\nplt.xlabel('Datenindex')\nplt.ylabel('Skalierte Temperatur');\n```\n\n::: {.cell-output .cell-output-display}\n![](array_read_n_write_files/figure-pdf/cell-7-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nBeim Schreiben der Datei wird ein mehrzeiliger Kommentar mithilfe des \nZeilenumbruchzeichens `\\n` definiert. Die Ausgabe der Gleitkommazahlen wird \nmit `%5.2f` formatiert, was 5 Stellen insgesamt und zwei Nachkommastellen \nentspricht.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Zuweisung ist auf mehrere Zeilen aufgeteilt, aufgrund der \n# schmalen Darstellung im Skript\nkommentar = f'Daten aus {dateiname} skaliert auf den Bereich ' + \\\n             '0 bis 1 \\noriginales Min / Max:' + \\\n            f'{np.min(daten)}/{np.max(daten)}'\nneu_dateiname = '01-daten/TC01_skaliert.csv'\n\nnp.savetxt(neu_dateiname, daten_skaliert, \n           header=kommentar, fmt='%5.2f')\n```\n:::\n\n\nZum Veranschaulichen werden die ersten Zeilen der neuen Datei ausgegeben.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Einlesen der ersten Zeilen der neu erstellten Datei\ndatei = open(neu_dateiname, 'r')\nfor i in range(10):\n    print( datei.readline() , end='')\ndatei.close()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Daten aus 01-daten/TC01.csv skaliert auf den Bereich 0 bis 1 \n# originales Min / Max:20.1/31.1\n 0.00\n 0.00\n 0.00\n 0.01\n 0.01\n 0.01\n 0.01\n 0.01\n```\n:::\n:::\n\n\n<!-- ::: {.callout-tip collapse=\"true\"}\n\n## Zwischenübung: Arraydaten lesen und schreiben\n\n\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n:::\n\n::: -->\n\n",
    "supporting": [
      "array_read_n_write_files/figure-pdf"
    ],
    "filters": []
  }
}
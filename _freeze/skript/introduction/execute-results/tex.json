{
  "hash": "688f4e1bd15a1474665d44459018e8b1",
  "result": {
    "engine": "jupyter",
    "markdown": "# Einführung NumPy\n\nNumPy ist eine leistungsstarke Bibliothek für Python, die für numerisches \nRechnen und Datenanalyse verwendet wird. Daher auch der Name NumPy, ein Akronym \nfür \"Numerisches Python\" (englisch: \"Numeric Python\" oder \"Numerical Python\"). \nNumPy selbst ist hauptsächlich in der Programmiersprache C geschrieben, weshalb\nNumPy generell sehr schnell ist. \n\nNumPy bietet ein effizientes Arbeiten mit kleinen und großen Vektoren und \nMatrizen, die so ansonsten nur umständlich in nativem Python implementiert \nwerden würden. Dabei bietet NumPy auch die Möglichkeit, einfach mit Vektoren und \nMatrizen zu rechnen, und das auch für sehr große Datenmengen.\n\nDiese Einführung wird Ihnen dabei helfen, die Grundlagen von NumPy zu verstehen \nund zu nutzen.\n\n## Vorteile & Nachteile\n\nFast immer sind Operationen mit Numpy Datenstrukturen schneller. Im Gegensatz zu\nnativen Python Listen kann man dort aber nur einen Datentyp pro Liste speichern.\n\n::: {.callout-note collapse=\"true\"}\n## Warum ist numpy oftmals schneller?\n\nNumPy implementiert eine effizientere Speicherung von Listen im Speicher. \nNativ speichert Python Listeninhalte aufgeteilt, wo gerade Platz ist.\n\n![Speicherung von Daten in nativem Python](../skript/00-bilder/data_memory_list.svg){#fig-python_memory fig-alt=\"Sequentielle Daten werden an zufälligen Orten im Speicher gespeichert\"}\n\nDagegen werden NumPy Arrays und Matritzen zusammenhängend gespeichert, was einen\neffizienteren Datenaufruf ermöglicht. \n\n![Speicherung von Daten bei Numpy](../skript/00-bilder/data_memory_numpy.svg){#fig-numpy_memory fig-alt=\"Sequentielle Daten werden an einem Ort im Speicher sequentiell gespeichert\"}\n\nDies bedeutet aber auch, dass es eine Erweiterung der Liste deutlich schneller \nist als eine Erweiterung von Arrays oder Matrizen. Bei Listen kann jeder \nfreie Platz genutzt werden, während Arrays und Matrizen an einen neuen Ort im \nSpeicher kopiert werden müssen.\n\n:::\n\n## Einbinden des Pakets\n\nNumPy wird über folgende Zeile eingebunden. Dabei hat sich global der Standard \nentwickelt, als Alias `np` zu verwenden.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n```\n:::\n\n\n## Referenzen\n\nSämtliche hier vorgestellten Funktionen lassen sich in der (englischen) \nNumPy-Dokumentation nachschlagen: [Dokumentation](https://numpy.org/doc/)\n\n",
    "supporting": [
      "introduction_files/figure-pdf"
    ],
    "filters": []
  }
}
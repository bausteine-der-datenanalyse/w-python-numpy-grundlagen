# Einführung NumPy

NumPy ist eine leistungsstarke Bibliothek für Python, die für numerisches 
Rechnen und Datenanalyse verwendet wird. Daher auch der Name NumPy, ein Akronym 
für "Numerisches Python" (englisch: "Numeric Python" oder "Numerical Python"). 
NumPy selbst ist hauptsächlich in der Programmiersprache C geschrieben, weshalb
NumPy generell sehr schnell ist. 

NumPy bietet ein effizientes Arbeiten mit kleinen und großen Vektoren und 
Matrizen, die so ansonsten nur umständlich in nativem Python implementiert 
werden würden. Dabei bietet NumPy auch die Möglichkeit, einfach mit Vektoren und 
Matrizen zu rechnen, und das auch für sehr große Datenmengen.

Diese Einführung wird Ihnen dabei helfen, die Grundlagen von NumPy zu verstehen 
und zu nutzen.

## Vorteile & Nachteile

Fast immer sind Operationen mit Numpy Datenstrukturen schneller. Im Gegensatz zu
nativen Python Listen kann man dort aber nur einen Datentyp pro Liste speichern.

::: {.callout-note collapse="true"}
## Warum ist numpy oftmals schneller?

NumPy implementiert eine effizientere Speicherung von Listen im Speicher. 
Nativ speichert Python Listeninhalte aufgeteilt, wo gerade Platz ist.

![Speicherung von Daten in nativem Python](skript/00-bilder/data_memory_list.svg){#fig-python_memory fig-alt="Sequentielle Daten werden an zufälligen Orten im Speicher gespeichert"}

Dagegen werden NumPy Arrays und Matritzen zusammenhängend gespeichert, was einen
effizienteren Datenaufruf ermöglicht. 

![Speicherung von Daten bei Numpy](../skript/00-bilder/data_memory_numpy.svg){#fig-numpy_memory fig-alt="Sequentielle Daten werden an einem Ort im Speicher sequentiell gespeichert"}

Dies bedeutet aber auch, dass es eine Erweiterung der Liste deutlich schneller 
ist als eine Erweiterung von Arrays oder Matrizen. Bei Listen kann jeder 
freie Platz genutzt werden, während Arrays und Matrizen an einen neuen Ort im 
Speicher kopiert werden müssen.

:::

## Einbinden des Pakets

NumPy wird über folgende Zeile eingebunden. Dabei hat sich global der Standard 
entwickelt, als Alias `np` zu verwenden.

```{python}
import numpy as np
```

## Referenzen

Sämtliche hier vorgestellten Funktionen lassen sich in der (englischen) 
NumPy-Dokumentation nachschlagen: [Dokumentation](https://numpy.org/doc/)



